Sequence()#
{#
Boundary("Start 1");#
Phase("1")#
{#
',#
R_Simulate(this_house_cal_dates, this_house_uncal_std)#
,'#
Span("Span of dates");    #
};#
Boundary("End 1");#
};#
')#
## Execution and result retrieval#
my_result_file <- executeOxcalScript(this_house_model)#
my_result_text <- readOxcalOutput(my_result_file)#
my_result_data <- parseOxcalOutput(my_result_text, only.R_Date = F)#
## Collection of the spans#
span <- my_result_data$`Span of dates`$posterior_probabilities#
## Collection of boundaries#
boundary_begin <- my_result_data$`Start 1`$posterior_probabilities#
boundary_end <- my_result_data$`End 1`$posterior_probabilities#
list(span = span,#
boundary_begin = boundary_begin,#
boundary_end = boundary_end)#
}
library(reshape2)#
library(ggplot2)#
library(foreach)#
library(magrittr)#
#
library(oxcAAR)#
quickSetupOxcal()
# Setting up the simulation#
time_frame <- list( min = -5250, max = -4950)#
#
## Setup for the houses#
n_dates_per_house <- list(min=2, max=5)#
standard_deviations <- list(min=25, max=40)#
mean_life_span <- 40#
std_life_span <- 5#
#
n_houses <- 11#
# n_houses <- 6#
#
# Preparing the houses dates#
houses_life_span <- round(rnorm(n_houses, mean_life_span, std_life_span))#
houses_abs_date_begin <- round(runif(n_houses, time_frame$min, time_frame$max))
result_collector <- foreach(house=1:n_houses) %dopar% {#
## Life span in abs. terms#
this_house_abs_life_span <- houses_abs_date_begin[house] + 0:(houses_life_span[house]-1)#
## Number of dates per house#
this_house_n_cal_dates <- sample(n_dates_per_house$min:n_dates_per_house$max, size = 1)#
## based on that, dates in Calendar scale and std for the R_Simulate#
this_house_cal_dates <- sample(this_house_abs_life_span,#
size = this_house_n_cal_dates)#
this_house_uncal_std <- sample(standard_deviations$min:standard_deviations$max,#
size = this_house_n_cal_dates,#
replace = T)#
## Transforming into an Oxcal String#
this_house_model <- paste('#
Sequence()#
{#
Boundary("Start 1");#
Phase("1")#
{#
',#
R_Simulate(this_house_cal_dates, this_house_uncal_std)#
,'#
Span("Span of dates");    #
};#
Boundary("End 1");#
};#
')#
## Execution and result retrieval#
my_result_file <- executeOxcalScript(this_house_model)#
my_result_text <- readOxcalOutput(my_result_file)#
my_result_data <- parseOxcalOutput(my_result_text, only.R_Date = F)#
## Collection of the spans#
span <- my_result_data$`Span of dates`$posterior_probabilities#
## Collection of boundaries#
boundary_begin <- my_result_data$`Start 1`$posterior_probabilities#
boundary_end <- my_result_data$`End 1`$posterior_probabilities#
list(span = span,#
boundary_begin = boundary_begin,#
boundary_end = boundary_end)#
}#
#
result_reshaped <- melt(result_collector, id.vars = "dates")#
#
spans <- result_reshaped[result_reshaped$L2=="span",]
ggplot(spans, aes(x = dates, y = value, color = factor(L1))) + geom_line() + xlim(c(0,100))
ggplot(result_reshaped, aes(x = dates, y = value, color = factor(L1))) + geom_line()
ggplot(spans, aes(x = dates, y = value, color = factor(L1))) + geom_line()
# Weighted Mean of Duration from prob_dist of span#
#
by(spans, spans$L1, function(x) {#
sum(x$dates * x$value)*5#
}) %>% as.vector %>% mean
boundary_begins <- result_reshaped[result_reshaped$L2=="boundary_begin",]#
boundary_ends <- result_reshaped[result_reshaped$L2=="boundary_end",]#
#
ggplot(boundary_begins, aes(x = dates, y = value, color = factor(L1))) + geom_line()
ggplot(boundary_ends, aes(x = dates, y = value, color = factor(L1))) + geom_line()
boundary_begins <- result_reshaped[result_reshaped$L2=="boundary_begin",]#
boundary_ends <- result_reshaped[result_reshaped$L2=="boundary_end",]#
#
ggplot(boundary_begins, aes(x = dates, y = value, color = factor(L1))) + geom_line() + xlim(c(-5300,-4950))
ggplot(boundary_ends, aes(x = dates, y = value, color = factor(L1))) + geom_line() + xlim(c(-5300,-4950))
begins_weighted_mean <- by(boundary_begins, boundary_begins$L1, function(x) {#
sum(x$dates * x$value)*5#
}) %>% as.vector#
#
ends_weighted_mean <- by(boundary_ends, boundary_ends$L1, function(x) {#
sum(x$dates * x$value)*5#
}) %>% as.vector#
#
mean(ends_weighted_mean - begins_weighted_mean)
# Duration by Modus#
#
begins_modus <- by(boundary_begins, boundary_begins$L1, function(x) {#
x$dates[which.max(x$value)]#
}) %>% as.vector#
#
ends_modus <- by(boundary_ends, boundary_ends$L1, function(x) {#
x$dates[which.max(x$value)]#
}) %>% as.vector#
#
mean(ends_modus - begins_modus)
ends_modus - begins_modus
begins_weighted_mean_2sigma <- by(boundary_begins, boundary_begins$L1, function(x) {#
this_2sigma <- cumsum(x$value*5)>=0.025 & cumsum(x$value*5)<=0.975#
this_set <- x[this_2sigma,]#
this_set$value <- this_set$value/sum(this_set$value)#
sum(this_set$dates * this_set$value)#
}) %>% as.vector#
#
ends_weighted_mean_2sigma <- by(boundary_ends, boundary_ends$L1, function(x) {#
this_2sigma <- cumsum(x$value*5)>=0.025 & cumsum(x$value*5)<=0.975#
this_set <- x[this_2sigma,]#
this_set$value <- this_set$value/sum(this_set$value)#
sum(this_set$dates * this_set$value)#
}) %>% as.vector#
#
mean(ends_weighted_mean_2sigma - begins_weighted_mean_2sigma)
library(reshape2)#
library(ggplot2)#
library(foreach)#
library(magrittr)#
#
library(oxcAAR)#
quickSetupOxcal()
# Setting up the simulation#
time_frame <- list( min = -5250, max = -5000)#
#
## Setup for the houses#
n_dates_per_house <- list(min=2, max=5)#
standard_deviations <- list(min=25, max=40)#
mean_life_span <- 40#
std_life_span <- 5#
#
n_houses <- 15#
# n_houses <- 6#
#
# Preparing the houses dates#
houses_life_span <- round(rnorm(n_houses, mean_life_span, std_life_span))#
houses_abs_date_begin <- round(runif(n_houses, time_frame$min, time_frame$max))
result_collector <- foreach(house=1:n_houses) %dopar% {#
## Life span in abs. terms#
this_house_abs_life_span <- houses_abs_date_begin[house] + 0:(houses_life_span[house]-1)#
## Number of dates per house#
this_house_n_cal_dates <- sample(n_dates_per_house$min:n_dates_per_house$max, size = 1)#
## based on that, dates in Calendar scale and std for the R_Simulate#
this_house_cal_dates <- sample(this_house_abs_life_span,#
size = this_house_n_cal_dates)#
this_house_uncal_std <- sample(standard_deviations$min:standard_deviations$max,#
size = this_house_n_cal_dates,#
replace = T)#
## Transforming into an Oxcal String#
this_house_model <- paste('#
Sequence()#
{#
Boundary("Start 1");#
Phase("1")#
{#
',#
R_Simulate(this_house_cal_dates, this_house_uncal_std)#
,'#
Span("Span of dates");    #
};#
Boundary("End 1");#
};#
')#
## Execution and result retrieval#
my_result_file <- executeOxcalScript(this_house_model)#
my_result_text <- readOxcalOutput(my_result_file)#
my_result_data <- parseOxcalOutput(my_result_text, only.R_Date = F)#
## Collection of the spans#
span <- my_result_data$`Span of dates`$posterior_probabilities#
## Collection of boundaries#
boundary_begin <- my_result_data$`Start 1`$posterior_probabilities#
boundary_end <- my_result_data$`End 1`$posterior_probabilities#
list(span = span,#
boundary_begin = boundary_begin,#
boundary_end = boundary_end)#
}
result_reshaped <- melt(result_collector, id.vars = "dates")#
#
spans <- result_reshaped[result_reshaped$L2=="span",]#
#
ggplot(spans, aes(x = dates, y = value, color = factor(L1))) + geom_line() + xlim(c(0,200))
by(spans, spans$L1, function(x) {#
sum(x$dates * x$value)*5#
}) %>% as.vector %>% mean
boundary_begins <- result_reshaped[result_reshaped$L2=="boundary_begin",]#
boundary_ends <- result_reshaped[result_reshaped$L2=="boundary_end",]#
#
ggplot(boundary_begins, aes(x = dates, y = value, color = factor(L1))) + geom_line() + xlim(c(-5350,-4950))
ggplot(boundary_ends, aes(x = dates, y = value, color = factor(L1))) + geom_line()  + xlim(c(-5350,-4950))
ggplot(boundary_ends, aes(x = dates, y = value, color = factor(L1))) + geom_line()  + xlim(c(-5350,-4900))
houses_abs_date_begin
# Setting up the simulation#
time_frame <- list( min = -5200, max = -5000)#
#
## Setup for the houses#
n_dates_per_house <- list(min=2, max=5)#
standard_deviations <- list(min=25, max=40)#
mean_life_span <- 40#
std_life_span <- 5#
#
n_houses <- 11#
# n_houses <- 6#
#
# Preparing the houses dates#
houses_life_span <- round(rnorm(n_houses, mean_life_span, std_life_span))#
houses_abs_date_begin <- round(runif(n_houses, time_frame$min, time_frame$max))
result_collector <- foreach(house=1:n_houses) %dopar% {#
## Life span in abs. terms#
this_house_abs_life_span <- houses_abs_date_begin[house] + 0:(houses_life_span[house]-1)#
## Number of dates per house#
this_house_n_cal_dates <- sample(n_dates_per_house$min:n_dates_per_house$max, size = 1)#
## based on that, dates in Calendar scale and std for the R_Simulate#
this_house_cal_dates <- sample(this_house_abs_life_span,#
size = this_house_n_cal_dates)#
this_house_uncal_std <- sample(standard_deviations$min:standard_deviations$max,#
size = this_house_n_cal_dates,#
replace = T)#
## Transforming into an Oxcal String#
this_house_model <- paste('#
Sequence()#
{#
Boundary("Start 1");#
Phase("1")#
{#
',#
R_Simulate(this_house_cal_dates, this_house_uncal_std)#
,'#
Span("Span of dates");    #
};#
Boundary("End 1");#
};#
')#
## Execution and result retrieval#
my_result_file <- executeOxcalScript(this_house_model)#
my_result_text <- readOxcalOutput(my_result_file)#
my_result_data <- parseOxcalOutput(my_result_text, only.R_Date = F)#
## Collection of the spans#
span <- my_result_data$`Span of dates`$posterior_probabilities#
## Collection of boundaries#
boundary_begin <- my_result_data$`Start 1`$posterior_probabilities#
boundary_end <- my_result_data$`End 1`$posterior_probabilities#
list(span = span,#
boundary_begin = boundary_begin,#
boundary_end = boundary_end)#
}
result_reshaped <- melt(result_collector, id.vars = "dates")#
#
spans <- result_reshaped[result_reshaped$L2=="span",]#
#
ggplot(spans, aes(x = dates, y = value, color = factor(L1))) + geom_line() + xlim(c(0,200))
by(spans, spans$L1, function(x) {#
sum(x$dates * x$value)*5#
}) %>% as.vector %>% mean
boundary_begins <- result_reshaped[result_reshaped$L2=="boundary_begin",]#
boundary_ends <- result_reshaped[result_reshaped$L2=="boundary_end",]#
#
ggplot(boundary_begins, aes(x = dates, y = value, color = factor(L1))) + geom_line() + xlim(c(-5350,-4950))
ggplot(boundary_ends, aes(x = dates, y = value, color = factor(L1))) + geom_line()  + xlim(c(-5350,-4900))
ggplot(boundary_ends, aes(x = dates, y = value, color = factor(L1))) + geom_line()  + xlim(c(-5200,-4850))
begins_weighted_mean <- by(boundary_begins, boundary_begins$L1, function(x) {#
sum(x$dates * x$value)*5#
}) %>% as.vector#
#
ends_weighted_mean <- by(boundary_ends, boundary_ends$L1, function(x) {#
sum(x$dates * x$value)*5#
}) %>% as.vector#
#
mean(ends_weighted_mean - begins_weighted_mean)
begins_modus <- by(boundary_begins, boundary_begins$L1, function(x) {#
x$dates[which.max(x$value)]#
}) %>% as.vector#
#
ends_modus <- by(boundary_ends, boundary_ends$L1, function(x) {#
x$dates[which.max(x$value)]#
}) %>% as.vector#
#
mean(ends_modus - begins_modus)
begins_weighted_mean_2sigma <- by(boundary_begins, boundary_begins$L1, function(x) {#
this_2sigma <- cumsum(x$value*5)>=0.025 & cumsum(x$value*5)<=0.975#
this_set <- x[this_2sigma,]#
this_set$value <- this_set$value/sum(this_set$value)#
sum(this_set$dates * this_set$value)#
}) %>% as.vector#
#
ends_weighted_mean_2sigma <- by(boundary_ends, boundary_ends$L1, function(x) {#
this_2sigma <- cumsum(x$value*5)>=0.025 & cumsum(x$value*5)<=0.975#
this_set <- x[this_2sigma,]#
this_set$value <- this_set$value/sum(this_set$value)#
sum(this_set$dates * this_set$value)#
}) %>% as.vector#
#
mean(ends_weighted_mean_2sigma - begins_weighted_mean_2sigma)
# Preparations#
library(reshape2)#
library(ggplot2)#
library(foreach)#
library(magrittr)#
#
library(oxcAAR)#
quickSetupOxcal()#
#
library(doMC)#
registerDoMC(cores=2) # please change according to the number of cores of your computer!#
#
# Setting up the simulation#
time_frame <- list( min = -5250, max = -5000)#
#
## Setup for the houses#
n_dates_per_house <- list(min=2, max=5)#
standard_deviations <- list(min=25, max=40)#
mean_life_span <- 50#
std_life_span <- 5#
#
n_houses <- 10#
# n_houses <- 6#
#
# Preparing the houses dates#
houses_life_span <- round(rnorm(n_houses, mean_life_span, std_life_span))#
houses_abs_date_begin <- round(runif(n_houses, time_frame$min, time_frame$max))#
#
results <- foreach(house=1:n_houses) %dopar% {#
## Life span in abs. terms#
this_house_abs_life_span <- houses_abs_date_begin[house] + 0:(houses_life_span[house]-1)#
## Number of dates per house#
this_house_n_cal_dates <- sample(n_dates_per_house$min:n_dates_per_house$max, size = 1)#
## based on that, dates in Calendar scale and std for the R_Simulate#
this_house_cal_dates <- sample(this_house_abs_life_span,#
size = this_house_n_cal_dates)#
this_house_uncal_std <- sample(standard_deviations$min:standard_deviations$max,#
size = this_house_n_cal_dates,#
replace = T)#
## Transforming into an Oxcal String#
this_house_model <- paste0('#
Sequence()#
{#
Boundary("Start ', house, '");#
Phase("House ', house, '")#
{#
',#
R_Simulate(this_house_cal_dates, this_house_uncal_std)#
,'#
Span("Span of ', house, '");    #
First("First of ', house, '");  #
Last("Last of ', house, '");  #
};#
Boundary("End ', house, '");#
};#
')#
}#
span_models <- foreach(house=1:n_houses) %dopar% {#
span_model<- paste0('#
Date("=Span of ', house, '");')#
#
}#
results_unlist <- paste(unlist(unlist(results)),collapse='')#
span_models_unlist <- paste(unlist(unlist(span_models)),collapse='')#
result_collector <-paste('#
Sequence("Settlement")#
{#
Boundary("Settlement start");#
Phase()#
{',#
results_unlist,'#
};#
Boundary("Settlement end");#
};#
Sequence("house spans")#
{#
Sigma_Boundary("lower 1-sigma bound");#
Phase("house lives")#
{#
Date("typical house");#
',#
span_models_unlist#
,'#
};#
Sigma_Boundary("upper 1-sigma bound");#
};#
')#
## Execution and result retrieval#
## my_result_file <- executeOxcalScript(result_collector)#
## my_result_text <- readOxcalOutput(my_result_file)#
## my_result_data <- parseOxcalOutput(my_result_text, only.R_Date = F)#
#
clip <- pipe("pbcopy", "w")                       #
write.table(result_collector, file=clip)                               #
close(clip)
X <- rpoint(100)
X
rpoint(100, function(x,y) { x^2 + y^2}, win=letterR)
Z <- setcov(letterR)
X <- rpoint(100, Z)
X
rpoint(100, function(x,y) { x^2 + y^2}, win=letterR)
rr.df<-data.frame(nrow=sample(1:12,100,TRUE,prob=12:1),#
  ncol=sample(1:12,100,TRUE,prob=12:1))
rr.df
sqrect<-function(x0,y0,x1,y1) {#
  nx<-x1-x0-1#
  ny<-y1-y0-1#
  for(x in 0:nx) {#
   for(y in 0:ny)#
    rect(x0+x,y0+y,x0+x+1,y0+y+1)#
  }#
}
rrPlot<-function(rrdf,div=1.3) {#
  nrect<-dim(rrdf)[1]#
  plotspace<-nrect/div#
  plot(c(1,plotspace),c(1,plotspace),type="n",#
   axes=FALSE,xlab="",ylab="",main="Random Rectangles")#
  xpos<-ypos<-maxypos<-1#
  for(rectangle in 1:nrect) {#
   if(xpos+rrdf[rectangle,1] > plotspace) {#
    xpos<-1#
    ypos<-maxypos#
    maxypos<-1#
   }#
   sqrect(xpos,ypos,xpos+rrdf[rectangle,1],#
    ypos+rrdf[rectangle,2])#
   xpos<-xpos+rrdf[rectangle,1]+1#
   if(ypos+rrdf[rectangle,2] > maxypos)#
    maxypos<-ypos+rrdf[rectangle,2]+2#
  }#
}
rrPlot
x<-sqrect(rr.df)
