% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sim_rect.R
\name{sim_rect}
\alias{sim_rect}
\title{Simulation of postholes}
\usage{
sim_rect(lower, upper, housenumber, maxrows, mindist, maxdist, pointjitter,
  preserve, rp, outputmethod)
}
\arguments{
\item{lower}{Number marking the lower left corner of the area of interest.}

\item{upper}{Number marking the lower left corner of the area of interest.}

\item{housenumber}{Number of simulated houses.}

\item{maxrows}{Maximum number of rows and crossrows (minimum number is always
2).}

\item{mindist}{Decimal, minimum distance between postholes.}

\item{maxdist}{Decimal, maximum distance between postholes.}

\item{pointjitter}{Decimal, defining the jittering of points (= postholes).}

\item{preserve}{Number, defining the percentage of points to be preserved
(0-100).}

\item{rp}{Number of additional random points (= postholes).}

\item{outputmethod}{Character string, defining the format of the output list.
Options include shp (SpatialPointDataframe, SpatialLinesDataframe),
spatstat, spatial}
}
\value{
A list of points and lines in various formats for display in R or
  QGIS.
}
\description{
\code{sim_rect} allows the user to test the main function \code{find_rect()}
with simulated data. The number of houses as well as the number of rows and
crossrows can be choosen freely. The function allows furthermore for
uncertainty in measurements and placements of postholes and also simulates
the common situation that not all formerly existing postholes were
discovered. Finally, to add another layer of fuzziness, the function allows
to add further random points, because in real- life situations it is
virtually impossible to ascribe every posthole to a certain building.
}
\examples{
# Simulating 50 houses with 2-5 rows and crossrows where the posts are in a 
# distance of 2-5 units to each other in a window of 200 x 200 units. The
# points are jittered by 0.3 units, and an additional 1000 points are
# generated. Only 80\% of all points are preserved. The output is a list
# spatstat-points and -lines. 
library(spatstat)
library(maptools)
library(sp)
library(data.table)
sim <- sim_rect(lower = 0, upper = 200, housenumber = 20,  maxrows = 5,
mindist = 2, maxdist = 5, pointjitter = 0.3, preserve = 80,
rp = 100, outputmethod = "spatstat") 
plot(sim$points)
plot(sim$lines, add=TRUE)


}
